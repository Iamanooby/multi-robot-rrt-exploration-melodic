<!-- Launch file for the rrt-detector and the assigner -->

<launch>
  <arg name="model" default="waffle_pi" doc="model type [burger, waffle, waffle_pi]"/>
  <arg name="move_forward_only" default="false"/>

  <!-- define for the turtlebot environment -->
  <arg name="first_tb3"  default="tb3_1"/>
  <arg name="second_tb3" default="tb3_2"/>
  <arg name="third_tb3"  default="tb3_3"/>

  <arg name="first_tb3_x_pos" default=" 0.5"/>
  <arg name="first_tb3_y_pos" default=" 2.5"/>
  <arg name="first_tb3_z_pos" default=" 0.0"/>
  <arg name="first_tb3_yaw"   default=" 0.0"/>

  <arg name="second_tb3_x_pos" default=" 0.5"/>
  <arg name="second_tb3_y_pos" default=" 3.5"/>
  <arg name="second_tb3_z_pos" default=" 0.0"/>
  <arg name="second_tb3_yaw"   default=" 0.0"/>

  <arg name="third_tb3_x_pos" default=" 0.5"/>
  <arg name="third_tb3_y_pos" default=" 3.0"/>
  <arg name="third_tb3_z_pos" default=" 0.0"/>
  <arg name="third_tb3_yaw"   default=" 0.0"/>

<!-- launch gazebos from the data -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find turtlebot3_gazebo)/worlds/turtlebot3_house.world"/>
    <arg name="paused" value="false"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="gui" value="true"/>
    <arg name="headless" value="false"/>
    <arg name="debug" value="false"/>
  </include>  

<!-- spawn the robots and related information -->
  <group ns = "/$(arg first_tb3)">
    <param name="robot_description" command="$(find xacro)/xacro --inorder $(find turtlebot3_description)/urdf/turtlebot3_$(arg model).urdf.xacro" />
    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" output="screen">
      <param name="publish_frequency" type="double" value="100.0" />
      <param name="use_tf_static" type="bool" value="false" />
      <param name="tf_prefix" value="$(arg first_tb3)" />
    </node>
    <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-urdf -model $(arg first_tb3) -x $(arg first_tb3_x_pos) -y $(arg first_tb3_y_pos) -z $(arg first_tb3_z_pos) -Y $(arg first_tb3_yaw) -param robot_description" />
    <!-- include gmapping for the first turtle bot -->
    <include file="$(find turtlebot3_slam)/launch/turtlebot3_gmapping.launch">
      <arg name="set_base_frame" value="$(arg first_tb3)/base_footprint"/>
      <arg name="set_odom_frame" value="$(arg first_tb3)/odom"/>
      <arg name="set_map_frame" value="$(arg first_tb3)/map"/>
    </include>
    <!-- include move base for the first turtle bot -->
    <include file="$(find ros_simulation)/launch/includes/move_base.launch">
      <arg name="model" value="$(arg model)" />
      <arg name="move_forward_only" value="$(arg move_forward_only)"/>
      <arg name="cmd_vel_topic" value="/$(arg first_tb3)/cmd_vel"/>
      <arg name="namespace" value="$(arg first_tb3)"/>
    </include>
    <!-- include amcl for the first turtle bot -->
    <include file="$(find ros_simulation)/launch/includes/amcl.launch">
      <arg name="scan_topic" value="$(arg first_tb3)/scan"/>
      <arg name="global_frame_id" value="$(arg first_tb3)/map"/>
      <arg name="base_frame_id" value="$(arg first_tb3)/base_footprint"/>
      <arg name="odom_frame_id" value="$(arg first_tb3)/odom"/>
    </include>

  </group>

  <group ns = "/$(arg second_tb3)">
    <param name="robot_description" command="$(find xacro)/xacro --inorder $(find turtlebot3_description)/urdf/turtlebot3_$(arg model).urdf.xacro" />
    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" output="screen">
      <param name="publish_frequency" type="double" value="100.0" />
      <param name="use_tf_static" type="bool" value="false" />
      <param name="tf_prefix" value="$(arg second_tb3)" />
    </node>
    <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-urdf -model $(arg second_tb3) -x $(arg second_tb3_x_pos) -y $(arg second_tb3_y_pos) -z $(arg second_tb3_z_pos) -Y $(arg second_tb3_yaw) -param robot_description" />
    <!-- include gmapping for the second turtle bot -->
    <include file="$(find turtlebot3_slam)/launch/turtlebot3_gmapping.launch">
      <arg name="set_base_frame" value="$(arg second_tb3)/base_footprint"/>
      <arg name="set_odom_frame" value="$(arg second_tb3)/odom"/>
      <arg name="set_map_frame" value="$(arg second_tb3)/map"/>
    </include>
    <!-- include move base for the second turtle bot -->
    <include file="$(find ros_simulation)/launch/includes/move_base.launch">
      <arg name="model" value="$(arg model)" />
      <arg name="move_forward_only" value="$(arg move_forward_only)"/>
      <arg name="cmd_vel_topic" value="/$(arg second_tb3)/cmd_vel"/>
      <arg name="namespace" value="$(arg second_tb3)"/>
    </include>
    <!-- include amcl for the second turtle bot -->
    <include file="$(find ros_simulation)/launch/includes/amcl.launch">
      <arg name="scan_topic" value="$(arg second_tb3)/scan"/>
      <arg name="global_frame_id" value="$(arg second_tb3)/map"/>
      <arg name="base_frame_id" value="$(arg second_tb3)/base_footprint"/>
      <arg name="odom_frame_id" value="$(arg second_tb3)/odom"/>
    </include>

  </group>

  <group ns = "/$(arg third_tb3)">
    <param name="robot_description" command="$(find xacro)/xacro --inorder $(find turtlebot3_description)/urdf/turtlebot3_$(arg model).urdf.xacro" />
    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" output="screen">
      <param name="publish_frequency" type="double" value="100.0" />
      <param name="use_tf_static" type="bool" value="false" />
      <param name="tf_prefix" value="$(arg third_tb3)" />
    </node>
    <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-urdf -model $(arg third_tb3) -x $(arg third_tb3_x_pos) -y $(arg third_tb3_y_pos) -z $(arg third_tb3_z_pos) -Y $(arg third_tb3_yaw) -param robot_description" />
    <!-- include gmapping for the third turtle bot -->
    <include file="$(find turtlebot3_slam)/launch/turtlebot3_gmapping.launch">
      <arg name="set_base_frame" value="$(arg third_tb3)/base_footprint"/>
      <arg name="set_odom_frame" value="$(arg third_tb3)/odom"/>
      <arg name="set_map_frame" value="$(arg third_tb3)/map"/>
    </include>
    <!-- include move base for the third turtle bot -->
    <include file="$(find ros_simulation)/launch/includes/move_base.launch">
      <arg name="model" value="$(arg model)" />
      <arg name="move_forward_only" value="$(arg move_forward_only)"/>
      <arg name="cmd_vel_topic" value="/$(arg third_tb3)/cmd_vel"/>
      <arg name="namespace" value="$(arg third_tb3)"/>
    </include>
    <!-- include amcl for the third turtle bot -->
    <include file="$(find ros_simulation)/launch/includes/amcl.launch">
      <arg name="scan_topic" value="$(arg third_tb3)/scan"/>
      <arg name="global_frame_id" value="$(arg third_tb3)/map"/>
      <arg name="base_frame_id" value="$(arg third_tb3)/base_footprint"/>
      <arg name="odom_frame_id" value="$(arg third_tb3)/odom"/>
    </include>
  </group>

  <!-- Map megring (know inital position case)-->
  <group ns="/$(arg first_tb3)/map_merge">
    <param name="init_pose_x" value="$(arg first_tb3_x_pos)"/>
    <param name="init_pose_y" value="$(arg first_tb3_y_pos)"/>
    <param name="init_pose_z" value="$(arg first_tb3_z_pos)"/>
    <param name="init_pose_yaw" value="$(arg first_tb3_yaw)"/>
  </group>
  <group ns="/$(arg second_tb3)/map_merge">
    <param name="init_pose_x" value="$(arg second_tb3_x_pos)"/>
    <param name="init_pose_y" value="$(arg second_tb3_y_pos)"/>
    <param name="init_pose_z" value="$(arg second_tb3_z_pos)"/>
    <param name="init_pose_yaw" value="$(arg second_tb3_yaw)"/>
  </group>
  <group ns="/$(arg third_tb3)/map_merge">
    <param name="init_pose_x" value="$(arg third_tb3_x_pos)"/>
    <param name="init_pose_y" value="$(arg third_tb3_y_pos)"/>
    <param name="init_pose_z" value="$(arg third_tb3_z_pos)"/>
    <param name="init_pose_yaw" value="$(arg third_tb3_yaw)"/>
  </group>


    <!-- Launch the map_merge node along with transform publishers -->
    <node pkg="multirobot_map_merge" type="map_merge" respawn="false" name="map_merge" output="screen">
      <param name="robot_map_topic" value="map"/>
      <param name="robot_namespace" value="tb3_"/>
      <param name="merged_map_topic" value="map"/>
      <param name="world_frame" value="map"/>
      <param name="known_init_poses" value="true"/>
      <param name="merging_rate" value="5.0"/>
      <param name="discovery_rate" value="0.1"/>
      <param name="estimation_rate" value="0.2"/>
      <!-- <param name="merging_rate" value="4.0"/> -->
      <!-- <param name="discovery_rate" value="0.05"/>
      <param name="estimation_rate" value="0.1"/> -->
      <param name="estimation_confidence" value="1.0"/>
  </node>

  <!-- perform static transform publisher for three robots -->
  <node pkg="tf" type="static_transform_publisher" name="world_to_$(arg first_tb3)_tf_broadcaster"  args="0 0 0 0 0 0 /map /$(arg first_tb3)/map 100"/>
  <node pkg="tf" type="static_transform_publisher" name="world_to_$(arg second_tb3)_tf_broadcaster" args="0 0 0 0 0 0 /map /$(arg second_tb3)/map 100"/>
  <node pkg="tf" type="static_transform_publisher" name="world_to_$(arg third_tb3)_tf_broadcaster" args="0 0 0 0 0 0 /map /$(arg third_tb3)/map 100"/>

  <!-- open rviz for visualization purpose -->
  <node pkg="rviz" type="rviz" name="rviz" args="-d $(find ros_simulation)/rviz/multi_tb3_gmapping.rviz">
  </node>

</launch> 
